#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>

int main()
{
	//for循环：for(表达式1;表达式2;表达式3){循环语句}
	//表达式1：初始化部分，用于初始化循环变量 表达式2：条件判断部分，用于判断循环终止条件 表达式3：调整部分，用于循环完成后对循环条件的调整
	//常用循环语句：for>>while>>do while
	
	printf("While ：\n");
	int a = 0;
	//初始化变量
	while (a <= 10)
	//判断循环终止条件
	{
		printf(" %d \n", a);
		a++;
		//对循环条件调整
	}
	//例如以下语句存在问题：当代码逐渐增加时，变量的初始化、循环条件判断以及对循环条件进行判断将分隔较远，会在对代码进行修改时造成不便
	//则使用下for语句来弥补该不足：
	printf("For ：\n");
	int b = 0;
	for (b = 1; b <= 10; b++)
	//(初始化变量;判断循环终止条件;对循环条件调整)
	{
		printf(" %d \n", b);
	}

	//验证break语句是否可以在for语句中进行使用：
	printf("Break ：\n");
	int c = 0;
	for (c = 1; c <= 10; c++)
		//(初始化变量;判断循环终止条件;对循环条件调整)
	{
		if (c == 5)
		{
			break;
		}
		else
		{
			printf(" %d \n", c);
		}
	}
	//验证continue语句是否可以在for语句中使用：
	printf("Continue ：\n");
	int d = 0;
	for (d = 1; d <= 10; d++)
		//(初始化变量;判断循环终止条件;对循环条件调整)
	{
		if (d == 5)
		{
			continue;
			//同时相对于while来说，因为对变量的调整操作在循环语句的起始位置，恰好避免了continue语句可能导致的死循环
		}
		else
		{
			printf(" %d \n", d);
		}
	}
	//经过以上两段代码验证，break语句与continue语句均可以在for循环语句中使用


	return 0;
}
